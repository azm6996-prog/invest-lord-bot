# main.py
import os
import logging
import asyncio
from decimal import Decimal
from typing import List, Dict, Any

import gspread
import pandas as pd
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
# -----------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# -----------------------------
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# -----------------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
SHEET_ID = os.getenv("SHEET_ID")  # id —Ç–∞–±–ª–∏—Ü—ã Google Sheets
SERVICE_JSON = os.getenv("SERVICE_JSON_FILE", "service.json")  # –∏–º—è —Ñ–∞–π–ª–∞ JSON (–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ —Ä–µ–ø–æ/Render Files)

if not BOT_TOKEN or not SHEET_ID:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ SHEET_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    raise SystemExit("Missing BOT_TOKEN or SHEET_ID environment variables")

# -----------------------------
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
# -----------------------------
def connect_gsheet():
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    scopes = ["https://www.googleapis.com/auth/spreadsheets",
              "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_file(SERVICE_JSON, scopes=scopes)
    client = gspread.authorize(creds)
    sh = client.open_by_key(SHEET_ID)
    return sh

# –û–±—Ä–∞–∑–µ—Ü —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–∏—Å—Ç–∞:
# –õ–∏—Å—Ç —Å –∏–º–µ–Ω–µ–º "portfolio" —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
# account,type,symbol,qty,avg_price,currency,notes
EXPECTED_SHEET_NAME = "portfolio"

def sheet_to_dataframe(sh) -> pd.DataFrame:
    try:
        worksheet = sh.worksheet(EXPECTED_SHEET_NAME)
    except Exception as e:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        worksheet = sh.sheet1
    rows = worksheet.get_all_records()
    df = pd.DataFrame(rows)
    # –ü—Ä–∏–≤–æ–¥–∏–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    if df.empty:
        return df
    # –ü–æ–ª—è: account,type,symbol,qty,avg_price,currency,notes
    for col in ["qty", "avg_price"]:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0)
    return df

# -----------------------------
# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
# -----------------------------
def analyze_portfolio(df: pd.DataFrame) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É: –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º, –ø–æ —Ç–∏–ø–∞–º, –æ–±—â–∏–π –∏—Ç–æ–≥"""
    result = {}
    if df.empty:
        return {"total": 0, "by_account": {}, "by_type": {}, "rows": []}

    # –†–∞—Å—á—ë—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏: qty * avg_price
    df["value"] = df["qty"].fillna(0) * df["avg_price"].fillna(0)
    total = float(df["value"].sum())

    # –ü–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º
    by_account = df.groupby("account")["value"].sum().to_dict()
    # –ü–æ —Ç–∏–ø—É (bond/stock/other)
    by_type = df.groupby("type")["value"].sum().to_dict()

    # –î–æ–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
    by_account_pct = {k: (float(v)/total*100 if total else 0) for k, v in by_account.items()}
    by_type_pct = {k: (float(v)/total*100 if total else 0) for k, v in by_type.items()}

    result = {
        "total": total,
        "by_account": by_account,
        "by_account_pct": by_account_pct,
        "by_type": by_type,
        "by_type_pct": by_type_pct,
        "rows": df.to_dict(orient="records"),
    }
    return result

# -----------------------------
# Aiogram bot
# -----------------------------
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# -- /start
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    text = (
        "–ü—Ä–∏–≤–µ—Ç, –ë—Ä–æ! –Ø ‚Äî —Ç–≤–æ–π InvestLord –±–æ—Ç.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/–ø–æ—Ä—Ç—Ñ–µ–ª—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n"
        "/–∞–Ω–∞–ª–∏–∑ ‚Äî –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ\n"
        "/—Å—Ç—Ä–æ–∫–∞ ‚Äî –≤—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫ (—Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç)\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n\n"
        "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –±—É–¥—É—â–µ–º."
    )
    await message.answer(text)

# -- /–ø–æ—Ä—Ç—Ñ–µ–ª—å
@dp.message_handler(commands=["–ø–æ—Ä—Ç—Ñ–µ–ª—å"])
async def cmd_portfolio(message: types.Message):
    try:
        sh = connect_gsheet()
        df = sheet_to_dataframe(sh)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Google Sheets")
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: " + str(e))
        return

    if df.empty:
        await message.answer("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞.")
        return

    text_lines = ["üìä *–¢–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å*:\n"]
    total = 0.0
    for _, row in df.iterrows():
        symbol = row.get("symbol", "")
        qty = row.get("qty", 0)
        avg = row.get("avg_price", 0)
        value = float(qty) * float(avg)
        total += value
        text_lines.append(f"{symbol} ‚Äî qty: {qty}, price: {avg} ‚ÇΩ, value: {value:,.2f} ‚ÇΩ")
    text_lines.append("\nüíµ *–ò—Ç–æ–≥–æ:* {:.2f} ‚ÇΩ".format(total))
    await message.answer("\n".join(text_lines), parse_mode=ParseMode.MARKDOWN)

# -- /–∞–Ω–∞–ª–∏–∑
@dp.message_handler(commands=["–∞–Ω–∞–ª–∏–∑"])
async def cmd_analysis(message: types.Message):
    try:
        sh = connect_gsheet()
        df = sheet_to_dataframe(sh)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: " + str(e))
        return

    analysis = analyze_portfolio(df)
    if analysis["total"] == 0:
        await message.answer("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π.")
        return

    lines = [f"üìà *–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è* ‚Äî –ò—Ç–æ–≥–æ: {analysis['total']:,.2f} ‚ÇΩ\n"]
    lines.append("‚Äî –ü–æ —Å—á–µ—Ç–∞–º:")
    for acc, val in analysis["by_account"].items():
        pct = analysis["by_account_pct"].get(acc, 0)
        lines.append(f"{acc}: {val:,.2f} ‚ÇΩ ({pct:.1f}%)")
    lines.append("\n‚Äî –ü–æ —Ç–∏–ø–∞–º:")
    for t, val in analysis["by_type"].items():
        pct = analysis["by_type_pct"].get(t, 0)
        lines.append(f"{t}: {val:,.2f} ‚ÇΩ ({pct:.1f}%)")

    await message.answer("\n".join(lines), parse_mode=ParseMode.MARKDOWN)

# -- /—Å—Ç—Ä–æ–∫–∞ (–ø–µ—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã ‚Äî –¥–ª—è —Ç–µ—Å—Ç–∞)
@dp.message_handler(commands=["—Å—Ç—Ä–æ–∫–∞"])
async def cmd_rows(message: types.Message):
    try:
        sh = connect_gsheet()
        df = sheet_to_dataframe(sh)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets: " + str(e))
        return

    if df.empty:
        await message.answer("–ü—É—Å—Ç–æ")
        return
    # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –∫—Ä–∞—Ç–∫–æ
    text = "–ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏:\n"
    for i, r in enumerate(df.to_dict(orient="records")[:10], 1):
        text += f"{i}. {r.get('symbol','')} ‚Äî {r.get('qty',0)} √ó {r.get('avg_price',0)} = {float(r.get('qty',0))*float(r.get('avg_price',0)):,.2f} ‚ÇΩ\n"
    await message.answer(text)

# -----------------------------
# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (placeholder)
# -----------------------------
async def periodic_task():
    while True:
        try:
            sh = connect_gsheet()
            df = sheet_to_dataframe(sh)
            # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ–±—â–∏–π –∏—Ç–æ–≥. –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏.
            analysis = analyze_portfolio(df)
            logger.info("Periodic update ‚Äî total: %s", analysis.get("total"))
        except Exception as e:
            logger.exception("Periodic task error")
        await asyncio.sleep(60 * 30)  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

# -----------------------------
# on_startup
# -----------------------------
async def on_startup(dp):
    asyncio.create_task(periodic_task())
    logger.info("Bot started and periodic task created.")

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)
